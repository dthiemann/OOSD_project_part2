Joe Maule ChangeLog

Update (11/12):
+ Checkpoint class:
	- fixed the calls to convert() and revert() since these methods were moved to
		the Utility class from the Field class
+ Allocation class:
	- changed size() to static to match the class
	
+ IdStorage class:
	- It looks like someone pushed an older version of this file to the repository;
		so I've re-uploaded the newer version with methods coded, along with my other classes

----------------		

Update (11/11):
+ FileStorage interface:
	- Deleted this class for the time being, as its use was becoming too limited
	- Will re-implement if find a way to better contain methods from Field/ID-Storage
	
+ Utility class:
	- Created to store the convert() and revert() methods
		:: In order to convert file data to ArrayList, I needed use of these, and
		   found calling a Field class method to do so was improper coding
		:: At this moment, I don't believe anyone else is using these 2 methods,
		   but if this changes, can just use Utility.convert() instead of calling from Field
		   
+ IdStorage class:
	- Methods have now been completed
		:: get() is now functioning to rebuild all data from file and return the ArrayList
		:: put() will write to the ID file
		:: freePointers() - internal method to clear all indices in Allocation's bit array for re-writing;
			this made for simpler code than creating an array of all ID pointers, writing to those
			pointers, then adjusting code in the event that 1 or more new blocks of data needed
			to be written to the file
		   
+ Some small tweaks to FieldStorage and Kblock classes
	- Mostly bad logic from the FieldStorage class

+ Misc:
	- Comments still need to be added/fixed
	- I have not done Unit testing on the classes, so cannot say if Integration test will succeed
	- For the Allocation class, as mentioned in class, I will need:
		:: a size() method to return the length of the Field bit array (for iteration purposes)
		:: an allocateID() method to get the index of the next free area of the ID file, but
			that does not mark that index/area as 'written to' (i.e., don't set the bit at that index)
			so that when the Field data is being written, it has a pointer to where the ID data
			will be written to
		:: Index 0 of each bit array will need to remain as un-set ("0") to be used as a Null pointer;
			when using the allocate() method, it will need to ignore this bit so it doesn't 
			accidentally set it
	- Removed "abstract" from the method names in the Database interface.
		:: Interface methods don't have any inherent code to be abstracted from in classes that
			inherit the Database interface - this is why the LinearFileDatabase is throwing an error
			about the @Override statement, since there's no code to deviate from

---------------

Update (11/10):
+ Kblock class:
	- Fixed byte[] size to 1024 (I had it set to 1000 for some reason)

+ FieldStorage class:
	- Fixed getIndex() to also take a byte[] instead of Field
	
+ Removed del() method from Field-, Id-, and File-Storage
  as it is not required for this part of the Project
	
---------------

Update (11/9):
+ Kblock class:
	- Did some testing with ByteBuffers
	- Fixed code so Kblock class now works correctly
	
+ FieldStorage class:
	- Added a get() method to retrieve the actual Field from file
		:: Takes an integer and reads that index from file
		:: Only returns the byte array - data would then need to be 
		      converted to a Field object

+ FileStorage interface:
	- Re-added the get() method now that Field- and Id-Storage contain this method
		:: Takes an integer and returns a byte array

+ IdStorage class:
	- Added code to get the full byte array of data for identifiers
	- Questions regarding put()/del() methods

---------------

Update (11/8):
+ Created a Kblock class:
	- used internally for Field- and Id-Storage classes
	  to handle the 1 kb byte arrays for reading/writing files
	- coded: constructors, get() methods for:
		pointer, 
		data (field or id), 
		block of data (1kb total) to write to a file
	  	  
+ FieldStorage class:
	- coded: getPointer, getIndex, put, and del methods
	- needs method names from Allocate and DiskSpace
	
+ ToDo:
	- fix all commenting
	- testing of methods
	- IdStorage class
	- evaluate Node and FieldSearch classes for rewrites
	- research FileStorage interface for greater utility

---------------

Created (11/7):

Commentary: 
Sorry for the delay. I've been fighting with Git.
I had a bit coded in, but I scrapped most of it because I found
a bunch of stuff that I needed to change and found some shortcuts.
Still a lot of implementation code to do, but I've got some
basic structure & comments in files.

+ To keep with preventing confusion, I made my classes
	FieldStorage and IdStorage, since that's what they're storing.
+ I'm still trying to figure out how I can/want to set up the byte arrays
	that are going to be read/written to files.
+ As discussed in class on Thurs, I'll probably have to implement 'size' 
	into the byte[]'s - left-padding with 0's might not actually work. 
++ I might end up using the Node class, but with how we're planning on implementing
	our database, I'm not foreseeing any need for it within your guys' classes, so
	I'll probably be heavily modifying it for my own uses.

Classes created:
1. FileStorage  -- Interface for Field- and Id-Storage
2. FieldStorage -- for writing Fields to a file
3. IdStorage    -- for writing Identifiers to a file

Notes:
1. Code is not completely implemented in this iteration, obviously
2. Using place-holder method names for DiskSpace and Allocate,
	will update as the names are finalized
3. I may need a size() method in ALLOCATE for the Field bit array -
	because of how we're storing our data, we'll need a way to iterate through
	the Field file (unless we just read until EndOfFile?)
4. We may need to edit the FieldSearch class as well, since it currently is using
	the Node class

	
