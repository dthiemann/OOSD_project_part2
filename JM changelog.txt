Joe Maule ChangeLog

Update (11/10):
+ Kblock class:
	- Fixed byte[] size to 1024 (I had it set to 1000 for some reason)

+ FieldStorage class:
	- Fixed getIndex() to also take a byte[] instead of Field
	
+ Removed del() method from Field-, Id-, and File-Storage
  as it is not required for this part of the Project
	
---------------

Update (11/9):
+ Kblock class:
	- Did some testing with ByteBuffers
	- Fixed code so Kblock class now works correctly
	
+ FieldStorage class:
	- Added a get() method to retrieve the actual Field from file
		:: Takes an integer and reads that index from file
		:: Only returns the byte array - data would then need to be 
		      converted to a Field object

+ FileStorage interface:
	- Re-added the get() method now that Field- and Id-Storage contain this method
		:: Takes an integer and returns a byte array

+ IdStorage class:
	- Added code to get the full byte array of data for identifiers
	- Questions regarding put()/del() methods

---------------

Update (11/8):
+ Created a Kblock class:
	- used internally for Field- and Id-Storage classes
	  to handle the 1 kb byte arrays for reading/writing files
	- coded: constructors, get() methods for:
		pointer, 
		data (field or id), 
		block of data (1kb total) to write to a file
	  	  
+ FieldStorage class:
	- coded: getPointer, getIndex, put, and del methods
	- needs method names from Allocate and DiskSpace
	
+ ToDo:
	- fix all commenting
	- testing of methods
	- IdStorage class
	- evaluate Node and FieldSearch classes for rewrites
	- research FileStorage interface for greater utility

---------------

Created (11/7):

Commentary: 
Sorry for the delay. I've been fighting with Git.
I had a bit coded in, but I scrapped most of it because I found
a bunch of stuff that I needed to change and found some shortcuts.
Still a lot of implementation code to do, but I've got some
basic structure & comments in files.

+ To keep with preventing confusion, I made my classes
	FieldStorage and IdStorage, since that's what they're storing.
+ I'm still trying to figure out how I can/want to set up the byte arrays
	that are going to be read/written to files.
+ As discussed in class on Thurs, I'll probably have to implement 'size' 
	into the byte[]'s - left-padding with 0's might not actually work. 
++ I might end up using the Node class, but with how we're planning on implementing
	our database, I'm not foreseeing any need for it within your guys' classes, so
	I'll probably be heavily modifying it for my own uses.

Classes created:
1. FileStorage  -- Interface for Field- and Id-Storage
2. FieldStorage -- for writing Fields to a file
3. IdStorage    -- for writing Identifiers to a file

Notes:
1. Code is not completely implemented in this iteration, obviously
2. Using place-holder method names for DiskSpace and Allocate,
	will update as the names are finalized
3. I may need a size() method in ALLOCATE for the Field bit array -
	because of how we're storing our data, we'll need a way to iterate through
	the Field file (unless we just read until EndOfFile?)
4. We may need to edit the FieldSearch class as well, since it currently is using
	the Node class

	
